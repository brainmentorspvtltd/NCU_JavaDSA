class Solution {
    int ans=0;
    boolean checkConstraint(int arr[][], int row, int col){
        //col
        for(int i=0;i<=row;i++){
            if(arr[i][col]==1){
                return false;
            }
        }
        
        //dia -left
        
        for(int i=row,j=col;i>=0 && j>=0 ;i--,j--){
            if(arr[i][j]==1){
                return false;
            }
        }
        
        //right dia
        for(int i=row, j=col ; i>=0 && j<arr.length ; i-- ,j++){
            if(arr[i][j]==1){
                return false;
            }
        }
        
        return true;
    }
    public void fillnQueen(int arr[][], int q){
        
        if(q==arr.length){
            ans++;
            return;
        }
        
        //options
        for(int i=0;i<arr.length;i++ ){
            if(checkConstraint(arr,q,i)==true){
                arr[q][i]=1;
                
                fillnQueen(arr, q+1);
                
                arr[q][i]=0;
            }
        }
    }
    public int totalNQueens(int n) {
    int arr[][]=new int[n][n];
    fillnQueen(arr,0);    
        return ans;

    }
}
