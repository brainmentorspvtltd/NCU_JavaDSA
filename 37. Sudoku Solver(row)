class Solution {

    boolean check(char [][]board,int row,int col,int val){
        char ch=(char)(val+48);
        for(int i=0;i<9;i++){
            if(board[i][col]==ch){
                return false;
            }
        }
        for(int i=0;i<9;i++){
            if(board[row][i]==ch){
                return false;
            }
        }
        
        //3*3
        int x=row-row%3;
        int y=col-col%3;
        
        for(int i=x;i<x+3;i++){
            for(int j=y;j<y+3;j++){
                if(board[i][j]==ch){
                    return false;
                }
            }
        }
        return true;
    }
    boolean solve(char[][] board,int row,int col){
        
        
        if(col==9 && row==8){
            return true;
        }
        if(col==9){
            col=0;
            row=row+1;
        }
        
        if(board[row][col]!='.'){
            return solve(board, row,col+1);
        }
        for(int i=1;i<=9;i++){
            if(check(board, row,col,i)==true){
                board[row][col]=(char)(i+48);
                if(solve(board,row,col+1)==true){
                    return true;
                }
                else{
                    board[row][col]='.';
                }
            }
        }
        
        return false;
    }
    
    public void solveSudoku(char[][] board) {
        solve(board,0,0);
        
    }
}
